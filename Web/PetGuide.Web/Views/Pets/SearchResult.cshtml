@inject IConfiguration Configuration
@using Microsoft.Extensions.Configuration

@model PetGuide.Web.ViewModels.Pets.SearchPetResultListViewModel

<main id="main">
    <!-- ======= Search Section ======= -->
    <section id="contact" class="contact">
        <div class="container">

            <div id="map_wrapper" style="height: 400px" class="d-flex justify-content-center">
                <div id="map_canvas" class="mapping"></div>
            </div>

            <div>
                <div class="mt-5" data-aos="fade-up">

                    <form>
                        <h1 class="text-center">Results</h1>
                        <div class="inner-form">

                            <section id="portfolio" class="portfolio">
                                <div class="row mt-3 portfolio-container">

                                    @{
                                        foreach (var pet in Model.PetsWithLocation)
                                        {
                                            <div class="col-lg-4 col-md-6 portfolio-item">
                                                <div class="portfolio-wrap">
                                                    <img src="@pet.FirstPicture?.Name.Replace("Thumbnail", "Fullscreen")" class="img-fluid" alt="">
                                                    <div class="portfolio-info">
                                                        <h4>@pet.Name</h4>
                                                        <p>@Html.DisplayFor(x => pet.Type)</p>
                                                        <div class="portfolio-links">
                                                            <a href="~/img/animal-video.jpg" data-gall="portfolioGallery" class="venobox" title="@pet.Name"><i class="icofont-image"></i></a>
                                                            <a asp-action="Details" asp-route-id="@pet.Id" title="More Details"><i class="bx bx-link"></i></a>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                </div>
                            </section>
                        </div>
                    </form>
                </div>
            </div>

        </div>
    </section>
</main>

@section LoginRegisterAdd {
    <link href="~/css/login-register.css" type="text/css" rel="stylesheet" asp-append-version="true">
    <link href="~/css/map.css" rel="stylesheet" asp-append-version="true" />
}

@section Scripts {
    <script async defer
            src="//maps.googleapis.com/maps/api/js?key=@this.Configuration["GoogleMaps:ApiKey"]&callback=initialize">
    </script>
    <script>
        function initialize() {
            var map;
            var bounds = new google.maps.LatLngBounds();
            var latlng = new google.maps.LatLng(42.698334, 23.319941);
            var mapOptions = {
                mapTypeId: 'roadmap',
                center: latlng
            };

            // Display a map on the page
            map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
            map.setTilt(45);

            // Multiple Markers
            var markers = [
                @foreach(var petLocation in Model.PetsWithLocation)
                {
                    @: ['@petLocation.Name', '@petLocation.LatitudeAsString', '@petLocation.LongitudeAsString'],
                }
            ];


            // Info Window Content
            var infoWindowContent = [
                @foreach (var petLocation in Model.PetsWithLocation)
            {
               @:['<div class="info_content">' + '<a href="/Pets/Details/@petLocation.Id"><h3>@petLocation.Name</h3></a>' + '<p>@petLocation.Type.ToString(), @petLocation.Status.ToString()</p>' + '<p>@petLocation.Street, @petLocation.District.ToString()</p>' + '</div>'],
            }
            ];
            // Display multiple markers on a map
            var infoWindow = new google.maps.InfoWindow(), marker, i;
            // Loop through our array of markers & place each one on the map
            for (i = 0; i < markers.length; i++) {
                var position = new google.maps.LatLng(markers[i][1], markers[i][2]);
                bounds.extend(position);
                marker = new google.maps.Marker({
                    position: position,
                    map: map,
                    title: markers[i][0]
                });
                // Allow each marker to have an info window
                google.maps.event.addListener(marker, 'click', (function (marker, i) {
                    return function () {
                        infoWindow.setContent(infoWindowContent[i][0]);
                        infoWindow.open(map, marker);
                    }
                })(marker, i));
                // Automatically center the map fitting all markers on the screen
                map.fitBounds(bounds);
            }
            // Override our map zoom level once our fitBounds function runs (Make sure it only runs once)
            var boundsListener = google.maps.event.addListener((map), 'bounds_changed', function (event) {
                this.setZoom(7);
                google.maps.event.removeListener(boundsListener);
            });
            //HTML 5 Geolocation
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(
                        (position) => {
                            var pos = {
                                lat: position.coords.latitude,
                                lng: position.coords.longitude,
                            };
                            infoWindow.setPosition(pos);
                            infoWindow.setContent("You are here.");
                            infoWindow.open(map);
                            map.setCenter(pos);
                        },
                        () => {
                            handleLocationError(true, infoWindow, map.getCenter());
                        }
                    );
                } else {
                    // Browser doesn't support Geolocation
                    handleLocationError(false, infoWindow, map.getCenter());
                }
            };

        function handleLocationError(browserHasGeolocation, infoWindow, pos) {
            infoWindow.setPosition(pos);
            infoWindow.setContent(
                browserHasGeolocation
                ? "Error: The Geolocation service failed."
                : "Error: Your browser doesn't support geolocation."
            );
            infoWindow.open(map);
        }
    </script>
}